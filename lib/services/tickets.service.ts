import { apiClient } from "../api-client"
import type { ApiResponse } from "../api-client"
import type {
  Ticket,
  BookTicketRequest,
  ApplyPromotionRequest,
  UseLoyaltyPointsRequest,
  PaginatedApiResponse,
  PaginationParams,
} from "../types/api"

export class TicketsService {
  async bookTicket(data: BookTicketRequest): Promise<Ticket> {
    const response = await apiClient.post<ApiResponse<Ticket>>("/api/Tickets/book", data)
    const ticket = response.data
    
    // Store booking data in localStorage for UI updates
    if (typeof window !== 'undefined') {
      const bookingData = {
        ticketId: ticket.id,
        eventId: data.eventId,
        eventPriceId: data.eventPriceId,
        quantity: data.quantity,
        totalAmount: ticket.totalAmount,
        isPaid: ticket.isPaid,
        purchaseDate: ticket.purchaseDate,
        timestamp: Date.now()
      }
      localStorage.setItem('currentBooking', JSON.stringify(bookingData))
      localStorage.setItem('currentBookingTicketId', ticket.id)
    }
    
    return ticket
  }

  async getTicket(id: string): Promise<Ticket> {
    const response = await apiClient.get<ApiResponse<Ticket>>(`/api/Tickets/${id}`)
    return response.data
  }

  async getTicketHistory(params?: PaginationParams): Promise<PaginatedApiResponse<Ticket>> {
    const queryParams = new URLSearchParams()

    if (params?.page) queryParams.append("page", params.page.toString())
    if (params?.pageSize) queryParams.append("pageSize", params.pageSize.toString())

    const queryString = queryParams.toString()
    const url = queryString ? `/api/Tickets/history?${queryString}` : "/api/Tickets/history"

    return apiClient.get<PaginatedApiResponse<Ticket>>(url)
  }

  async applyPromotion(data: ApplyPromotionRequest): Promise<Ticket> {
    return apiClient.post<Ticket>("/api/Tickets/promotions", data)
  }

  async useLoyaltyPoints(data: UseLoyaltyPointsRequest): Promise<Ticket> {
    return apiClient.post<Ticket>("/api/Tickets/loyalty-points", data)
  }

  // Ask backend to generate QR for a ticket and return identifiers
  async generateTicketQr(id: string): Promise<{ success: boolean; qrCodePath?: string; ticketCode?: string }> {
    const res = await apiClient.post<{ success: boolean; message?: string; data?: { ticketId: string; ticketCode?: string; qrCodePath?: string; qrCodeBase64?: string } }>(
      `/api/Qr/generate`,
      { ticketId: id }
    )
    return { success: !!res.success, qrCodePath: res.data?.qrCodePath, ticketCode: res.data?.ticketCode }
  }

  // Get payment status for a ticket
  async getPaymentStatus(ticketId: string): Promise<{ isPaid: boolean; paymentStatus: string; hasQrCode: boolean }> {
    const response = await apiClient.get<{ TicketId: string; IsPaid: boolean; PaymentStatus: string; Amount: number; HasQrCode: boolean; QrCodePath?: string }>(`/api/Payment/status/${ticketId}`)
    return {
      isPaid: response.IsPaid,
      paymentStatus: response.PaymentStatus,
      hasQrCode: response.HasQrCode
    }
  }

  // Get session status for payment confirmation
  async getSessionStatus(sessionId: string): Promise<{ status: string; ticketId?: string }> {
    const response = await apiClient.get<{ Status: string; CustomerEmail?: string; TicketId?: string }>(`/api/Payment/session-status/${sessionId}`)
    return {
      status: response.Status,
      ticketId: response.TicketId
    }
  }

  // Manually mark a ticket as paid (fallback)
  async markPaid(ticketId: string): Promise<{ success: boolean; isPaid: boolean }> {
    const res = await apiClient.post<{ Success: boolean; TicketId: string; IsPaid: boolean }>(`/api/Payment/mark-paid`, { ticketId })
    return { success: !!res.Success, isPaid: !!res.IsPaid }
  }

  // Force QR generation for a paid ticket
  async forceQrGeneration(ticketId: string): Promise<{ success: boolean; ticketCode?: string; qrCodePath?: string }> {
    const res = await apiClient.post<{ Success: boolean; Message?: string; TicketId: string; TicketCode?: string; QrCodePath?: string }>(`/api/Payment/force-qr-generation`, { ticketId })
    return { 
      success: !!res.Success, 
      ticketCode: res.TicketCode, 
      qrCodePath: res.QrCodePath 
    }
  }

  // Fetch the QR image generated by the backend using the ticketCode
  async getQrImageByTicketCode(ticketCode: string): Promise<Blob> {
    return apiClient.get(`/api/Qr/${ticketCode}`, {
      responseType: "blob",
    })
  }

  async validateTicket(ticketCode: string): Promise<{ valid: boolean; ticket?: Ticket }> {
    return apiClient.get(`/api/Tickets/validate/${ticketCode}`)
  }

  // Get QR code for a specific ticket using the endpoint mentioned in requirements
  async getTicketQRCode(ticketId: string): Promise<{ Success: boolean; QRCodePath?: string; TicketCode?: string }> {
    const response = await apiClient.get<{ Success: boolean; QRCodePath?: string; TicketCode?: string }>(`/api/Tickets/${ticketId}/qrcode`)
    return response
  }
}

export const ticketsService = new TicketsService()
